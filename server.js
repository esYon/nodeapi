// BASE SETUP// ======================================// CALL THE PACKAGES --------------------var express     = require('express'); // call expressvar app         = express(); // define app using expressvar bodyParser  = require('body-parser'); // get body-parservar morgan      = require('morgan'); // used to see requestsvar mongoose    = require('mongoose'); // for working w/ our databasevar port        = process.env.PORT || 8080; // set the port for our app// APP CONFIGURATION ---------------------// use body parser so we can grab information from POST requestsapp.use(bodyParser.urlencoded({ extended: true }));app.use(bodyParser.json());// configure our app to handle CORS requestsapp.use(function(req, res, next) {  res.setHeader('Access-Control-Allow-Origin', '*');  res.setHeader('Access-Control-Allow-Methods', 'GET, POST');  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type, \Authorization');  next();});// log all requests to the consoleapp.use(morgan('dev'));// ROUTES FOR OUR API// =========================// basic route for home pageapp.get('/', function(req, res) {  res.send('Welcome to the homepage!');});// get an instance of the express routervar apiRouter = express.Router();// test route to make sure everything is working// accessed at GET http://localhost:8080/apiRouterapiRouter.get('/', function(req, res) {  res.json({ message: 'hooray! welcome to our api!'});});// more routes for our API will happen here// REGISTER OUR ROUTES ---------------------------------// all of our routes will be prefixed with a/piapp.use('/api', apiRouter);// START THE SERVER// ====================app.listen(port);console.log('Magic happens on port ' + port);// server.js 2// BASE SETUP// ============================// connect to our database (hosted on modulus.io)mongoose.connect('mongodb://john@apollo.modulusmongo.net:27017/Edi4qive');// grab the packages that we need for the user modelvar mongoose = require('mongoose');var Schema = mongoose.Schema;var bcrypt = require('bcrypt-nodejs');// user schemavar UserSchema = new Schema({    name: String,  username: { type: String, required: true, index: { unique: true }},  password: { type: String, required: true, select: false }});// hash the password before the user is savedUserSchema.pre('save', function(next) {  var user = this;// hash the password only if the password has been changed or user is new    if (!user.isModified('password')) return next();// generate the hash  bcrypt.hash(user.password, null, null, function(err, hash) {    if (err) return next(err);// change the password to the hashed version    user.password = hash;    next();  });});// method to compare a given password with the database hashUserSchema.methods.comparePassword = function(password) {  var user = this;  return bcrypt.compareSync(password, user.password);};// return the modelmodule.exports = mongoose.model('User', UserSchema);// BASE SETUP// ====================var User = require('./app/models/user');